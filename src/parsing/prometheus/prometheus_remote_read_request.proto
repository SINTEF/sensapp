// https://prometheus.io/docs/prometheus/latest/querying/remote_read_api/
//
// Status: copy pasted from https://github.com/prometheus/prometheus/blob/b09eaf8acd9f06ec372826b752a7df929012505a/prompb/remote.proto

syntax = "proto3";

// ReadRequest represents a remote read request.
message ReadRequest {
  repeated Query queries = 1;

  enum ResponseType {
    // Server will return a single ReadResponse message with matched series that includes list of raw samples.
    // It's recommended to use streamed response types instead.
    //
    // Response headers:
    // Content-Type: "application/x-protobuf"
    // Content-Encoding: "snappy"
    SAMPLES = 0;
    // Server will stream a delimited ChunkedReadResponse message that
    // contains XOR or HISTOGRAM(!) encoded chunks for a single series.
    // Each message is following varint size and fixed size bigendian
    // uint32 for CRC32 Castagnoli checksum.
    //
    // Response headers:
    // Content-Type: "application/x-streamed-protobuf; proto=prometheus.ChunkedReadResponse"
    // Content-Encoding: ""
    STREAMED_XOR_CHUNKS = 1;
  }

  // accepted_response_types allows negotiating the content type of the response.
  //
  // Response types are taken from the list in the FIFO order. If no response type in `accepted_response_types` is
  // implemented by server, error is returned.
  // For request that do not contain `accepted_response_types` field the SAMPLES response type will be used.
  repeated ResponseType accepted_response_types = 2;
}

message Query {
  int64 start_timestamp_ms = 1;
  int64 end_timestamp_ms = 2;
  repeated LabelMatcher matchers = 3;
  ReadHints hints = 4;
}

// Matcher specifies a rule, which can match or set of labels or not.
message LabelMatcher {
  enum Type {
    EQ  = 0;
    NEQ = 1;
    RE  = 2;
    NRE = 3;
  }
  Type type    = 1;
  string name  = 2;
  string value = 3;
}

message ReadHints {
  int64 step_ms = 1;  // Query step size in milliseconds.
  string func = 2;    // String representation of surrounding function or aggregation.
  int64 start_ms = 3; // Start time in milliseconds.
  int64 end_ms = 4;   // End time in milliseconds.
  repeated string grouping = 5; // List of label names used in aggregation.
  bool by = 6; // Indicate whether it is without or by.
  int64 range_ms = 7; // Range vector selector range in milliseconds.
}
